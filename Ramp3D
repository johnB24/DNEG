set cut_paste_input [stack 0]
version 12.1 v5
push $cut_paste_input
add_layer {__position_world __position_world.x __position_world.y __position_world.z}
Group {
name Ramp3D
help "Creates a gradient between two 3D positions sampled from a point pass."
knobChanged "\nn = nuke.thisNode()\nk = nuke.thisKnob()\ns = nuke.toNode('SphereMatte')\nr = nuke.toNode('Start_End')\n\nif k.name() == \"falloffType\":\n    n\['falloff'].setVisible( k.value() != 'None' )\n    n\['exp'].setVisible( k.value() == 'Exponential' )\n\nif k.name() == \"rampDirection\":\n    for knob in \[n\['rotDivider'], n\['rotateAround'], n\['rot_order'], n\['rotate']]:\n        knob.setVisible(k.value() == 'Custom')\n\n"
note_font "Bitstream Vera Sans"
selected true
xpos -154
ypos -181
mapsize {0.15 0.15}
addUserKnob {20 Ramp3D}
addUserKnob {22 Documentation t "Click here to see the DNeg user docs for this tool." T "__import__('dnnuke.utils.asst.common', fromlist=\['openDocs']).openDocs(nuke.thisNode())" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {41 in l "position data" t "Choose a layer from the input that contains position data" T Shuffle_Input_Channels.in}
addUserKnob {41 to0 l output T Copy1.to0}
addUserKnob {6 unpremultiply t "Unpremultiplies the incoming position data by the alpha channel." +STARTLINE}
unpremultiply true
addUserKnob {6 useAlpha l "ignore outside alpha" t "If your input has an alpha channel, checking this will force everything outside that alpha channel to be black." -STARTLINE}
useAlpha true
addUserKnob {26 ""}
addUserKnob {4 rampDirection t "Choose the axis/direction of the ramp\n\nX : ramp along the X axis\nY : ramp along the Y axis\nZ : ramp along the Z axis\nCustom : starting with a ramp along the Z axis, rotate the ramp at will using the rotation controls\nStart to End: ramp along the vector that goes from start to end points" M {X Y Z Custom "Start to End" "" "" "" "" "" "" "" ""}}
rampDirection "Start to End"
addUserKnob {22 reverse l "swap start and end points" t "Swap the start and end postions in order to reverse the ramp direction." -STARTLINE T "start = nuke.thisGroup()\['start']\nend = nuke.thisGroup()\['end']\ntemp = start.value()\nprint temp\nstart.setValue( end.value() )\nend.setValue( temp )"}
addUserKnob {41 start T Start_End.start}
addUserKnob {41 end T Start_End.end}
addUserKnob {26 rotDivider l "" +STARTLINE +HIDDEN}
addUserKnob {4 rotateAround l "rotate around" +HIDDEN M {"start\t" center end}}
rotateAround center
addUserKnob {4 rot_order l "rotation order" +HIDDEN M {XYZ XZY YXZ YZX ZXY ZYX "" "" ""}}
rot_order ZYX
addUserKnob {13 rotate +HIDDEN}
addUserKnob {26 ""}
addUserKnob {4 falloffType t "Type of falloff used in the ramp." M {None Linear Smooth Quadratic Cubic Exponential "" ""}}
falloffType Cubic
addUserKnob {6 insideRamp l inside t "Instead of creating a linear ramp from black to white, fill only the area between the two points, going from black to white at the centre and back." -STARTLINE}
addUserKnob {7 falloff}
falloff 1
addUserKnob {7 exp +HIDDEN R 0.1 10}
exp 4.5
addUserKnob {20 previewTab l "3D Preview"}
addUserKnob {22 activate l Activate t "Activates the 3D preview. Please note that this adds a number of internal nodes to the gizmo so it's useful to deactivate the preview (which removes the nodes again) once you're done with it." T "node = nuke.toNode( 'Ramp3DInternal1' )\nif node:\n\tnuke.thisNode().knob( 'activate' ).setLabel( 'Activate' )\n\tnuke.thisNode().knob( 'quality' ).setFlag( nuke.INVISIBLE )\n\tnuke.thisNode().knob( 'rampScale' ).setFlag( nuke.INVISIBLE )\n\tnuke.delete( node )\n\n\tnuke.toNode( 'Output1' ).connectInput( 0, nuke.toNode( 'Copy1' ) )\n\nelse:\n\tfor node in nuke.selectedNodes(): node.setSelected( 0 )\n\tpreviewNode = nuke.createNode( 'Ramp3DInternal', inpanel = False )\n\tpreviewNode.connectInput( 0, nuke.toNode( 'img' ) )\n\tpreviewNode.connectInput( 1, nuke.toNode( 'Shuffle_Input_Channels' ) )\n\tpreviewNode.connectInput( 2, nuke.toNode( 'Copy1' ) )\n\tnuke.toNode( 'Output1' ).connectInput( 0, previewNode )\n\n\t#previewNode\['quality'].setExpression( 'parent.quality' )\n\t#previewNode\['rampScale'].setExpression( 'parent.rampScale' )\n\t#previewNode\['rampDirection'].setExpression( 'parent.rampDirection' )\n\t#previewNode\['insideRamp'].setExpression( 'parent.insideRamp' )\n\t#previewNode\['blackPoint'].setExpression( 'parent.Start_End.blackpoint' )\n\t#previewNode\['whitePoint'].setExpression( 'parent.Start_End.whitepoint' )\n\t#previewNode\['rot_order'].setExpression( 'parent.Axis1.rot_order' )\n\t#previewNode\['pivot'].setExpression( 'parent.Axis1.pivot' )\n\t#previewNode\['rotate'].setExpression( 'parent.Axis1.rotate' )\n\n\tnuke.thisNode().knob( 'activate' ).setLabel( 'Deactivate' )\n\tnuke.thisNode().knob( 'quality' ).clearFlag( nuke.INVISIBLE )\n\tnuke.thisNode().knob( 'rampScale' ).clearFlag( nuke.INVISIBLE )\n\tnuke.thisNode().knob( 'quality' ).setLabel( 'quality' )\n\tnuke.thisNode().knob( 'rampScale' ).setLabel( 'rampScale' )" +STARTLINE}
addUserKnob {6 activatePreview l INVISIBLE t "This will load a point cloud of the scene and the matte geometry into the 3D viewer." +INVISIBLE +STARTLINE}
addUserKnob {7 quality t "Point cloud resolution." +INVISIBLE R 0.01 1}
quality 0.25
addUserKnob {7 rampScale t "Size of the ramp geometry." +INVISIBLE R 0 100}
rampScale 25
}
Axis2 {
 inputs 0
 rot_order {{parent.rot_order x1 3 x1001 4}}
 rotate {{parent.rotate} {parent.rotate} {parent.rotate}}
 pivot {{parent.rotateAround/2} {parent.rotateAround/2} {parent.rotateAround/2}}
 name Axis1
 label "Creates axis from user values in \"custom\" ramp direction"
 xpos -229
 ypos 38
 addUserKnob {20 Ivy}
 addUserKnob {22 ivy_documentation l "Ivy Documentation" t "Open IvyTab documentation page in your web browser" T "__import__('dnnuke.toolbox.v1.nodes.docs', fromlist=\['open_docs_name']).open_docs_name('IvyTab')" +STARTLINE}
 addUserKnob {26 divider4 l "" +STARTLINE}
 addUserKnob {1 _ivyVals l "" +STARTLINE +HIDDEN}
 _ivyVals "\{'ivy_job': '', 'ivy_usemanualuri': False, 'leafname': '', 'ivy_vnum': 0, 'ivy_twignametags': \{\}, 'ivy_shot': '', 'ivy_regex': False, 'ivy_type': '', 'ivy_versionquery': '', 'spider_uri': ''\}"
 addUserKnob {52 ivyTab l "" -STARTLINE T "__import__('nukescripts').panels.WidgetKnob(__import__('dnnuke.core.ivy.tab.widget.query', fromlist=\['getBoundKnob']).getBoundKnob(nuke.thisNode()))"}
 addUserKnob {1 _ivyFile l "" +STARTLINE +HIDDEN +INVISIBLE}
 addUserKnob {78 _expressions l "" -STARTLINE +HIDDEN +INVISIBLE n 1}
 addUserKnob {26 divider0 l "" +STARTLINE}
 addUserKnob {20 dbinfo l "DB Info" n 1}
 dbinfo 0
 addUserKnob {1 twig_dnuuid l "Twig Id"}
 addUserKnob {1 stalk_dnuuid l "Stalk Id"}
 addUserKnob {1 twigtype_dnuuid l "Twig Type Id"}
 addUserKnob {1 leaf_dnuuid l "Leaf Id"}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {1 twigtype l "Twig Type"}
 addUserKnob {1 leaf_label l Leaf}
 addUserKnob {1 ivy_version l Version}
 addUserKnob {43 ivy_notes l Notes}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {1 build_label l "Build Label"}
 addUserKnob {20 dbinfoEndGroup l "DB Info" n -1}
}
Input {
 inputs 0
 name img
 xpos -790
 ypos -425
}
Dot {
 name Dot2
 xpos -756
 ypos -302
}
set N148cd0e0 [stack 0]
AddChannels {
 channels alpha
 color 1
 name AddChannels1
 xpos -646
 ypos -312
}
Shuffle {
 in __position_world
 alpha blue
 out rgb
 name Shuffle_Input_Channels
 xpos -646
 ypos -274
}
Unpremult {
 name Unpremult1
 xpos -646
 ypos -224
 disable {{!parent.unpremultiply i}}
}
set N14785900 [stack 0]
Add {
 channels rgb
 value {{-parent.start i} {-parent.start i} {-parent.start i} {curve i}}
 name Set_Origin
 label "Ramp direction \"start to end\""
 xpos -111
 ypos -230
}
ColorMatrix {
 matrix {
     {{xAxis.x i} {xAxis.y i} {xAxis.z i}}
     {{zAxis.x i} {zAxis.y i} {zAxis.z i}}
     {{-yAxis.x i} {-yAxis.y i} {-yAxis.z i}}
   }
 name ColorMatrix1
 xpos -111
 ypos -192
 addUserKnob {20 User}
 addUserKnob {7 dirVectorLength}
 dirVectorLength {{"sqrt ( ( (parent.end.r - parent.start.r) ** 2 )  + ( (parent.end.g - parent.start.g) ** 2 )  +  ( (parent.end.b - parent.start.b) ** 2 ))" i}}
 addUserKnob {13 zAxis}
 zAxis {{"(parent.end - parent.start) / dirVectorLength" i} {"(parent.end - parent.start) / dirVectorLength" i} {"(parent.end - parent.start) / dirVectorLength" i}}
 addUserKnob {13 initialYAxis}
 initialYAxis {0 {"\[python nuke.thisNode()\\\['zAxis'\\].value(1)\\ <\\ 1.0]" i} {"\[python (nuke.thisNode()\\\['zAxis'\\].value(1)\\ >=\\ 1.0)\\ *\\ -1.0]" i}}
 addUserKnob {13 foundXAxis}
 foundXAxis {{"initialYAxis.y * zAxis.z - initialYAxis.z * zAxis.y" i} {"initialYAxis.z * zAxis.x - initialYAxis.x * zAxis.z" i} {"initialYAxis.x * zAxis.y - initialYAxis.y * zAxis.x" i}}
 addUserKnob {7 xAxisLength}
 xAxisLength {{sqrt(foundXAxis.x**2+foundXAxis.y**2+foundXAxis.z**2) i}}
 addUserKnob {13 xAxis}
 xAxis {{"foundXAxis / xAxisLength" i} {"foundXAxis / xAxisLength" i} {"foundXAxis / xAxisLength" i}}
 addUserKnob {13 yAxis}
 yAxis {{"zAxis.y * xAxis.z - zAxis.z * xAxis.y" i} {"zAxis.z * xAxis.x - zAxis.x * xAxis.z" i} {"zAxis.x * xAxis.y - zAxis.y * xAxis.x" i}}
}
Multiply {
 channels rgb
 value {{1/ColorMatrix1.dirVectorLength}}
 name Multiply1
 label "Scale based on the start and end points"
 xpos -111
 ypos -166
}
Clamp {
 channels rgb
 name Clamp1
 label "Clamp all values to the calculated range"
 xpos -111
 ypos -128
}
Expression {
 expr0 "parent.useAlpha && a==0.0 ? 0 : r"
 expr1 "parent.useAlpha && a==0.0 ? 0 : g"
 expr2 "parent.useAlpha && a==0.0 ? 0 : b"
 name IgnoreOutsideAlpha1
 label "Ignore areas where alpha == 0"
 xpos -111
 ypos -90
}
Shuffle {
 alpha green
 name Shuffle3
 label "USE GREEN CHANNEL AS ALPHA?"
 xpos -111
 ypos -52
}
push $N14785900
Grade {
 blackpoint {{start} {start} {start} {curve}}
 whitepoint {{end} {end} {end} {curve}}
 black_clamp false
 maskChannelInput -rgba.alpha
 unpremult -rgba.alpha
 name Start_End
 label "Ramp direction \"X/Y/Z axis\"\nUses start and end points as white and black points"
 xpos -646
 ypos -198
 addUserKnob {20 User}
 addUserKnob {18 start}
 start {0 0 0}
 addUserKnob {6 start_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 end}
 end {0 0 1000}
 addUserKnob {6 end_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
set N13877cb0 [stack 0]
Add {
 channels rgb
 value {{-Axis1.world_matrix.3 i} {-Axis1.world_matrix.7 i} {-Axis1.world_matrix.11 i} {curve i}}
 name Translate1
 label "Ramp direction \"custom\"\nTakes the direction from the custom matrix"
 xpos -351
 ypos -198
}
ColorMatrix {
 matrix {
     {{Axis1.world_matrix.0 i} {Axis1.world_matrix.1 i} {Axis1.world_matrix.2 i}}
     {{Axis1.world_matrix.4 i} {Axis1.world_matrix.5 i} {Axis1.world_matrix.6 i}}
     {{Axis1.world_matrix.8 i} {Axis1.world_matrix.9 i} {Axis1.world_matrix.10 i}}
   }
 invert true
 name Rotate_Scale_Skew3
 label "The matrix for the chosen 3D direction"
 xpos -351
 ypos -148
 disable {{hasError i x200 1}}
}
Expression {
 expr0 "parent.useAlpha && a==0.0 ? 0 : r"
 expr1 "parent.useAlpha && a==0.0 ? 0 : g"
 expr2 "parent.useAlpha && a==0.0 ? 0 : b"
 name IgnoreOutsideAlpha3
 label "Ignore areas where alpha == 0"
 xpos -351
 ypos -110
}
Shuffle {
 alpha blue
 name Shuffle4
 label "USE BLUE AS ALPHA?"
 xpos -351
 ypos -72
}
push $N13877cb0
Expression {
 expr0 "parent.useAlpha && a==0.0 ? 0 : r"
 expr1 "parent.useAlpha && a==0.0 ? 0 : g"
 expr2 "parent.useAlpha && a==0.0 ? 0 : b"
 name IgnoreOutsideAlpha
 label "Ingore areas where alpha == 0"
 xpos -646
 ypos -148
}
set N14f7e880 [stack 0]
Shuffle {
 alpha blue
 name Z
 xpos -474
 ypos -85
}
push $N14f7e880
Shuffle {
 alpha green
 name Y
 xpos -560
 ypos -84
}
push $N14f7e880
Shuffle {
 alpha red
 name X
 xpos -646
 ypos -84
}
Switch {
 inputs 5
 which {{parent.rampDirection i}}
 name Switch3
 label "Switch between ramp directions"
 xpos -646
 ypos 22
}
set N13e449c0 [stack 0]
Clamp {
 channels alpha
 name Clamp2
 xpos -506
 ypos 16
}
set N13e4cdd0 [stack 0]
push $N13e4cdd0
Expression {
 channel0 alpha
 expr0 abs(1-a)
 channel1 none
 channel2 none
 channel3 none
 name Expression1
 xpos -506
 ypos 54
}
ChannelMerge {
 inputs 2
 operation absminus
 name ChannelMerge1
 xpos -396
 ypos 10
}
Invert {
 channels alpha
 name Invert1
 xpos -396
 ypos 82
}
push $N13e449c0
Switch {
 inputs 2
 which {{parent.insideRamp}}
 name Switch1
 xpos -646
 ypos 88
}
Grade {
 channels alpha
 whitepoint {{falloffType?falloff:0}}
 white_clamp true
 name Falloff
 xpos -646
 ypos 114
}
set N13c74770 [stack 0]
Expression {
 expr3 pow(a,parent.exp)
 name Exponential
 xpos -170
 ypos 171
}
push $N13c74770
Expression {
 expr3 clamp((a**3),0,1)
 name Cubic
 xpos -264
 ypos 171
}
push $N13c74770
Expression {
 expr3 clamp(pow2(a),0,1)
 name Quadratic
 xpos -358
 ypos 171
}
push $N13c74770
Expression {
 expr3 smoothstep(0,1,a)
 name Smooth
 xpos -455
 ypos 171
}
push $N13c74770
NoOp {
 name Linear
 xpos -546
 ypos 172
}
push $N13c74770
NoOp {
 name None
 xpos -646
 ypos 172
}
Switch {
 inputs 6
 which {{falloffType i}}
 name Switch2
 xpos -646
 ypos 229
}
Remove {
 operation keep
 channels alpha
 name Remove1
 xpos -646
 ypos 255
}
push $N148cd0e0
Dot {
 name Dot1
 xpos -756
 ypos 299
}
Copy {
 inputs 2
 from0 rgba.alpha
 to0 rgba.alpha
 name Copy1
 xpos -646
 ypos 293
}
Output {
 name Output1
 xpos -646
 ypos 418
}
end_group
